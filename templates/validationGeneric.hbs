const {{constantName (concat nativeType 'Keys')}}: string[] = [{{#each properties}}{{{stringLiteral name}}}{{#hasMore}}, {{/hasMore}}{{/each}}]

export function model{{className nativeType}}FromJson(name: string, value: any, knownKeys: Record<string, boolean> = {}): {{nativeType}} {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	{{constantName (concat nativeType 'Keys')}}.forEach(k => knownKeys[k] = true)
	{{#if discriminator}}

	const discriminatorValue = value.{{discriminator.name}}
	switch (value.{{discriminator.name}}) {
		{{#each discriminator.references}}
		case {{{value}}}:
			return {{>frag/fromJson model prefix=''}}(name, value)
		{{/each}}
	}

	throw `Invalid value for ${name}: didn't contain a known discriminator value: ${discriminatorValue}`
	{{else}}
	{{#if implementors}}
	{{#each implementors}}
	try {
		return {{>frag/fromJson . prefix=''}}(name, value)
	} catch (error) {

	}
	{{/each}}

	throw `Invalid type for ${name}: didn't match any subtype`
	{{else}}

	{{#if parent}}
	const result: Partial<{{nativeType}}> = {{>frag/fromJson parent prefix=''}}(name, value, knownKeys) as Partial<{{nativeType}}>
	{{else}}
	const result: Partial<{{nativeType}}> = {}
	{{/if}}
	{{#if properties}}

	{{#each properties}}
	{{#if required}}
	{{#if nullable}}
	result[{{{stringLiteral name}}}] = allowNull({{>frag/fromJson prefix=''}})(`${name}.{{name}}`, value[{{{stringLiteral name}}}])
	{{else}}
	result[{{{stringLiteral name}}}] = {{>frag/fromJson prefix=''}}(`${name}.{{name}}`, value[{{{stringLiteral name}}}])
	{{/if}}
	{{else}}
	{{#if nullable}}
	result[{{{stringLiteral name}}}] = allowNullOrUndefined({{>frag/fromJson prefix=''}})(`${name}.{{name}}`, value[{{{stringLiteral name}}}])
	{{else}}
	result[{{{stringLiteral name}}}] = allowUndefined({{>frag/fromJson prefix=''}})(`${name}.{{name}}`, value[{{{stringLiteral name}}}])
	{{/if}}
	{{/if}}
	{{/each}}
	{{/if}}

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in {{nativeType}}: ${key}`)
		}
	}

	return result as {{nativeType}}
	{{/if}}
	{{/if}}
}

export function model{{className nativeType}}ToJson(name: string, value: {{nativeType}}, knownKeys: Record<string, boolean> = {}): any {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	{{constantName (concat nativeType 'Keys')}}.forEach(k => knownKeys[k] = true)
	{{#if discriminator}}

	const discriminatorValue = value.{{discriminator.name}}
	switch (value.{{discriminator.name}}) {
		{{#each discriminator.references}}
		case {{{value}}}:
			return {{>frag/toJson model prefix=''}}(name, value)
		{{/each}}
	}

	throw `Invalid value for ${name}: didn't contain a known discriminator value: ${discriminatorValue}`
	{{else}}
	{{#if implementors}}
	const errors = []
	{{#each implementors}}
	try {
		return {{>frag/toJson . prefix=''}}(name, value as {{{nativeType}}})
	} catch (error) {
		errors.push(error)
	}
	{{/each}}

	throw `Invalid type for ${name}: didn't match any subtype. Preceding errors: ${errors.join('; ')}`
	{{else}}

	{{#if parent}}
	const result: any = {{>frag/toJson parent prefix=''}}(name, value, knownKeys)
	{{else}}
	const result: any = {}
	{{/if}}

	{{#each properties}}
	{{#if required}}
	{{#if nullable}}
	result[{{{stringLiteral name}}}] = allowNull({{>frag/toJson prefix=''}})(`${name}.{{name}}`, value[{{{stringLiteral name}}}])
	{{else}}
	result[{{{stringLiteral name}}}] = {{>frag/toJson prefix=''}}(`${name}.{{name}}`, value[{{{stringLiteral name}}}])
	{{/if}}
	{{else}}
	{{#if nullable}}
	result[{{{stringLiteral name}}}] = allowNullOrUndefined({{>frag/toJson prefix=''}})(`${name}.{{name}}`, value[{{{stringLiteral name}}}])
	{{else}}
	result[{{{stringLiteral name}}}] = allowUndefined({{>frag/toJson prefix=''}})(`${name}.{{name}}`, value[{{{stringLiteral name}}}])
	{{/if}}
	{{/if}}
	{{/each}}

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in {{nativeType}}: ${key}`)
		}
	}

	return result
	{{/if}}
	{{/if}}
}
{{#each schemas}}

{{#if (isEnum)}}
{{>validationEnum}}
{{else}}
{{>validationGeneric}}
{{/if}}
{{/each}}
